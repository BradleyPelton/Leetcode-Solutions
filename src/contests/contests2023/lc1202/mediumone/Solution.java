package contests.contests2023.lc1202.mediumone;

import java.util.ArrayList;
import java.util.List;

// First Attempt TLE
// Second Attempt TLE
// Third Attempt TLE
// Fuck this problem.

class Solution {
    public int minimumAddedCoins(int[] coins, int target) {
        // Greedy choosing the smallest doesn't work.
        // Greedy choosing the largest definitely doesn't work.

        // POWERS OF TWO
        // BINARY
        // MISSING BITS



        List<Integer> powersOfTwoLessThanTarget = new ArrayList<>();
        for (int i = 0; i < 10_000; i++) {
            int val = (int) Math.pow(2, i);
            if (val <= target) {
                powersOfTwoLessThanTarget.add(val);
            } else {
                break;
            }
        }

        List<Integer> coinsList = new ArrayList<>();
        for (int coin : coins) {
            coinsList.add(coin);
        }

        int ans = 0;
        for(int powerOfTwo : powersOfTwoLessThanTarget) {
            if (!coinsList.contains(powerOfTwo)) {
                ans++;

                List<Integer> newVals = new ArrayList<>();
                for (int i = 1; i < coins.length; i++) {
                    newVals.add(powerOfTwo);
                    for (int val : coinsList) {
                        if (val + powerOfTwo <= target) {
                            newVals.add(val + powerOfTwo);
                        }
                    }
                }
                coinsList.addAll(newVals);
            }
        }

        System.out.println(ans);
        return ans;


        // if we have 1,...,n , then we have
    }
}


class Tests {
    public static void main(String[] args) {
        Solution sol = new Solution();
        sol.minimumAddedCoins(new int[]{1,4,10}, 19);
        sol.minimumAddedCoins(new int[]{1,4,10,5,7,19}, 19);
        sol.minimumAddedCoins(new int[]{1,1,1}, 20);
        sol.minimumAddedCoins(new int[]{1}, 100000);
        sol.minimumAddedCoins(new int[]{599,350,31,476,289,26,419,56,429,92,55,206,870,403,104,291,31,668,569,645,729,180,307,524,396,599,618,144,952,613,723,577,796,434,449,885,572,924,832,512,843,623,4,957,932,764,155,739,648,379,977,750,809,4,731,705,673,21,228,406,320,138,927,737,875,379,422,377,213,610,471,492,755,415,355,633,478,586,655,395,631,631,970,377,673,191,966,824,795,11,45,591,243,802,994,697,664,892,284,850,106,581,221,927,290,188,642,929,240,466,436,985,795,985,584,860,86,199,593,175,837,12,407,375,371,154,399,380,395,105,982,915,85,74,607,392,854,749,793,591,896,645,509,835,397,440,874,599,741,403,142,50,993,119,505,932,161,309,883,726,41,279,480,231,491,952,481,654,427,339,72,853,213,511,592,676,546,885,701,277,961,537,125,921,144,1,444,242,628,855,847,409,307,789,991,89,677,474,380,825,315,656,33,129,868,893,302,544,973,526,582,326,611,612,773,364,569,215,103,488,543,908,345,647,655,806,300,419,994,16,595,786,72,461,690,622,435,480,677,723,498,874,550,159,776,31,332,213,137,747,879,895,98,484,793,558,142,100,802,571,314,147,794,427,848,128,542,437,179,120,492,254,985,751,481,499,40,223,187,75,530,356,929,463,323,486,965,999,735,354,109,469,536,554,248,410,123,112,656,28,544,198,634,704,6,183,692,479,646,373,903,545,95,312,816,340,653,625,24,87,320,983,450,831,412,545,392,92,240,348,680,219,423,133,587,57,536,609,473,783,219,643,244,421,735,384,942,799,220,208,954,284,468,352,954,882,189,810,18,948,583,272,338,249,946,485,281,660,725,553,465,199,307,379,583,716,40,810,608,330,340,179,399,171,624,697,885,287,327,757,992,1,571,554,477,301,499,342,637,439,937,723,661,514,690,62,729,274,228,164,441,240,144,990,530,908,918,433,46,103,398,164,952,856,172,328,466,205,551,206,571,745,91,187,148,178,688,402,58,8,62,360,750,455,712,608,353,103,829,459,746,769,130,356,237,253,492,146,725,900,436,631,7,389,708,164,733,235,952,980,551,313,343,405,749,730,39,925,663,992,112,855,542,141,600,141,339,297,149,438,30,775,727,319,932,650,950,174,998,933,51,941,823,771,338,946,146,680,115,900,867,514,928,967,75,295,883,566,535,107,568,390,756,225,389,156,642,989,207,479,512,634,542,363,492,565,1000,518,419,867,645,271,996,621,869,64,628,708,877,706,209,577,901,205,188,530,176,848,65,47,883,18,872,953,87,338,503,625,64,186,719,40,148,604,535,910,317,289,772,81,450,194,740,509,292,796,606,402,203,518,851,388,678,290,502,567,805,348,797,764,467,235,865,26,786,112,449,379,905,491,761,109,367,229,746,504,674,677,887,688,120,5,990,200,540,37,736,3,177,385,559,56,276,190,582,728,636,40,487,652,351,470,499,212,909,151,453,794,247,661,775,17,790,397,154,373,579,451,43,571,21,893,648,525,798,200,642,23,637,381,610,793,595,273,420,738,421,125,707,561,233,132,802,90,351,234,803,586,83,255,686,319,771,689,448,453,125,161,338,408,767,822,495,958,612,744,715,574,6,739,574,415,7,173,160,419,267,266,558,316,414,317,743,310,12,438,578,918,394,63,554,905,687,107,148,349,361,644,688,305,166,374,784,746,656,408,786,10,820,551,52,376,38,601,25,692,851,708,192,489,616,565,206,534,102,95,218,811,512,645,69,256,733,96,207,158,163,699,237,608,419,743,106,292,628,815,460,969,1000,227,851,821,629,591,740,445,462,586,916,436,501,375,769,481,449,8,201,864,889,314,398,45,280,588,387,800,456,116,735,101,676,842,220,535,380,614,574,736,919,960,774,519,763,315,751,197,601,858,138,291,376,193,782,844,258,504,498,328,513,827,208,892,983,307,31,42,776,821,323,248,449,647,278,558,496,992,112,922,742,824,711,585,844,584,179,775,27,978,67,617,542,298,958,490,602,280,599,562,756,357,718,117,489,408,881,915,613,699,327,766,820,378,712,866,120,244,437,434,826,69,4,854,789,178,539,431,459,898,632,353,455,111,569,410,717,599,898,583,414,491,628,801,529,216,639,610,585,564,393,764,983,254,733,30,166,343,566,428,263,29,734,825,271,839,226,581,938,592,556,15,344,69,482,832,586,462,136,539,192,330,511,256,331,804,405,853,120,354,447,794,678,907,848,34,7,993,921,122,43,384,23,382,836,183}, 1104);
        sol.minimumAddedCoins(new int[]{100000}, 100000);  // 19?
    }
}